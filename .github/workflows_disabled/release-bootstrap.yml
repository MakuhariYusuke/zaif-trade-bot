name: Release Bootstrap

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Version bump level (patch|minor|major)'
        required: false
        default: 'patch'

jobs:
  release-bootstrap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install deps
        run: npm ci

      - name: Determine next version
        id: bump
        run: |
          level='${{ github.event.inputs.level }}'
          if [ -z "$level" ]; then level=patch; fi
          current=$(node -p "require('./package.json').version")
          IFS='.' read -r MA MI PA <<< "$current"
          case "$level" in
            major) MA=$((MA+1)); MI=0; PA=0 ;;
            minor) MI=$((MI+1)); PA=0 ;;
            patch|*) PA=$((PA+1)) ;;
          esac
          next="${MA}.${MI}.${PA}"
          echo "next=$next" >> $GITHUB_OUTPUT
          echo "Next version: $next"

      - name: Update package.json version
        run: |
          next='${{ steps.bump.outputs.next }}'
          node -e "const fs=require('fs');const j=require('./package.json');j.version='${{ steps.bump.outputs.next }}';fs.writeFileSync('package.json', JSON.stringify(j,null,2)+'\n')"

      - name: Update CHANGELOG (promote Unreleased contents)
        run: |
          next='${{ steps.bump.outputs.next }}'
          today=$(date +%Y-%m-%d)
          awk -v ver="$next" -v today="$today" '
            BEGIN{ collecting=0; hasLines=0 }
            /^## Unreleased/ { print; collecting=1; next }
            /^## [0-9]+\.[0-9]+\.[0-9]+/ {
              if(!inserted){
                print "## "ver" - "today""; if(hasLines==0) print "\n_No changes (empty Unreleased).\n"; inserted=1;
              }
              collecting=0; print; next;
            }
            {
              if(collecting){ buf=buf $0 "\n"; if(length($0)>0) hasLines=1; next }
              print;
            }
            END{
              if(!inserted){
                print "## "ver" - "today""; if(hasLines==0) print "\n_No changes (empty Unreleased).\n"; inserted=1;
              }
              if(hasLines==1){ print buf }
            }
          ' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md
          # Reset Unreleased section to placeholder
          awk 'BEGIN{r=0} { if($0 ~ /^## Unreleased/){print $0;print "";print "_No changes yet._"; r=1; next} if(r==1){ if($0 ~ /^## /){r=2; print; next} else { next } } print }' CHANGELOG.md > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

      - name: Create release branch
        id: branch
        run: |
          next='${{ steps.bump.outputs.next }}'
            branch="release/v$next"
          git checkout -b "$branch"
          git add package.json CHANGELOG.md
          git commit -m "chore(release): v$next"
          git push origin "$branch"
          echo "branch=$branch" >> $GITHUB_OUTPUT

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          title: "chore(release): v${{ steps.bump.outputs.next }}"
          body: |
            Automated release bootstrap.
            - Version: ${{ steps.bump.outputs.next }}
            - Source: workflow_dispatch
          branch: ${{ steps.branch.outputs.branch }}
          labels: release
          draft: false

      - name: Summary
        run: |
          echo "### Release Bootstrap" >> $GITHUB_STEP_SUMMARY
          echo "Next: ${{ steps.bump.outputs.next }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ steps.branch.outputs.branch }}" >> $GITHUB_STEP_SUMMARY

      - name: Slack Notify (optional)
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"Release bootstrap created v${{ steps.bump.outputs.next }} (${GITHUB_REPOSITORY})\"}" "$SLACK_WEBHOOK_URL"
