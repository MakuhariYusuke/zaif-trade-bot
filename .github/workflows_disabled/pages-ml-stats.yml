name: ML/Stats Pages

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 19 * * *' # JST 4:00

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    if: ${{ vars.ENABLE_PAGES == '1' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Install deps
        run: npm ci
      - name: Build
        run: npm run build
      - name: Generate latest stats and reports
        run: |
          npx ts-node src/tools/stats/stats-graph.ts --out stats-paper.json --svg stats-paper.svg || true
          npx ts-node src/tools/stats/stats-graph.ts --out stats-live.json --svg stats-live.svg || true
          npm run report:summary -- --source paper || true
          npm run report:summary -- --source live || true
          # optional ML search (random, quick preview)
          PAIR=btc_jpy ML_SEARCH_MODE=random ML_RANDOM_STEPS=20 npx ts-node src/tools/ml/ml-search.ts || true
      - name: Prepare Pages content
        run: |
          mkdir -p ./public
          cp -f report-summary-*.json ./public/ 2>/dev/null || true
          cp -f stats-*.svg ./public/ 2>/dev/null || true
          cp -f ml-*.csv ./public/ 2>/dev/null || true
          cp -f report-ml-*.json ./public/ 2>/dev/null || true
          cp -f ml-search-top.json ./public/ 2>/dev/null || true
          # Also keep per-day Top3 history folder for overview
          DAY=$(date -u +%Y-%m-%d)
          mkdir -p ./public/history/day-$DAY
          if [ -f ml-search-top.json ]; then cp -f ml-search-top.json ./public/history/day-$DAY/top.json || true; fi
          RUN_TS=$(date -u +%Y%m%d-%H%M%S)
          mkdir -p ./public/history/run-$RUN_TS
          cp -f ./public/* ./public/history/run-$RUN_TS/ 2>/dev/null || true
          # Try to pull previous gh-pages content to preserve history
          mkdir -p ./_prev
          git fetch origin gh-pages || true
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            git checkout --progress --force -B ghpages-tmp refs/remotes/origin/gh-pages || true
            cp -rf ./* ./_prev/ 2>/dev/null || true
            rm -rf ./_prev/.git || true
            # Merge previous history into public
            mkdir -p ./public/history
            cp -rf ./_prev/history/* ./public/history/ 2>/dev/null || true
          fi
          # Build categorized index with Top3 excerpt
          {
            echo '<html><head><meta charset="utf-8"><title>ML / Stats Reports</title><style>body{font-family:sans-serif;padding:20px} table{border-collapse:collapse} td,th{border:1px solid #ccc;padding:4px 8px}</style></head><body>'
            echo '<h1>ML / Stats Reports</h1>'
            echo '<h2>Overview</h2>'
            echo '<ul>'
            for f in $(ls public 2>/dev/null); do [ "$f" = "index.html" ] && continue; echo "<li><a href=\"$f\">$f</a></li>"; done
            echo '</ul>'
            if [ -f public/ml-search-top.json ]; then
              echo '<h3>Top 3 (latest run)</h3>'
              jq -r '
                .top[:3] | ["#","pair","Win%","PnL","MaxDD","Params"],
                (.[] | [ (input_line_number|tostring), .pair, (((.winRate//0)*100)|floor|tostring), ((.pnl//0)|tostring), ((.maxDrawdown//0)|tostring), ("S="+((.SMA_SHORT//0)|tostring)+",L="+((.SMA_LONG//0)|tostring)+",RSI="+((.SELL_RSI_OVERBOUGHT//0)|tostring)+","+((.BUY_RSI_OVERSOLD//0)|tostring)) ])
              ' public/ml-search-top.json \
              | awk 'BEGIN{print "<table><thead><tr>"} NR==1{for(i=1;i<=NF;i++) printf("<th>%s</th>",$i); print "</tr></thead><tbody>"; next} {print "<tr>"; for(i=1;i<=NF;i++) printf("<td>%s</td>",$i); print "</tr>"} END{print "</tbody></table>"}'
            fi
            echo '<h2>Categories</h2>'
            echo '<h3>Stats</h3><ul>'
            for f in $(ls public/stats-*.svg 2>/dev/null); do b=$(basename "$f"); echo "<li><a href=\"$b\">$b</a></li>"; done
            echo '</ul>'
            echo '<h3>ML</h3><ul>'
            for f in public/ml-* public/report-ml-*.json; do b=$(basename "$f"); [ -e "$f" ] && echo "<li><a href=\"$b\">$b</a></li>"; done
            echo '</ul>'
            echo '<h2>History</h2><ul>'
            for d in $(ls -1 public/history 2>/dev/null); do 
              echo "<li><a href=\"history/$d/\">$d</a>";
              if [ -f "public/history/$d/top.json" ]; then 
                echo ' — Top3:'; 
                cat "public/history/$d/top.json" | jq -r '.top[:3] | ( ["#","pair","Win%","PnL","Params"] | @tsv ), (.[] | [ (input_line_number|tostring), .pair, ((.winRate//0)*100|floor|tostring), ((.pnl//0)|tostring), ("S="+((.SMA_SHORT//0)|tostring)+",L="+((.SMA_LONG//0)|tostring)+",RSI="+((.SELL_RSI_OVERBOUGHT//0)|tostring)+","+((.BUY_RSI_OVERSOLD//0)|tostring)) ] | @tsv )' | awk 'BEGIN{ORS=""} NR==1{print " <table><thead><tr>"; for(i=1;i<=NF;i++) printf("<th>%s</th>",$i); print "</tr></thead><tbody>"; next} {print "<tr>"; for(i=1;i<=NF;i++) printf("<td>%s</td>",$i); print "</tr>"} END{print "</tbody></table>"}'; 
                # Scenario report-summary links
                if ls public/history/$d/report-summary-*.json >/dev/null 2>&1; then 
                  echo ' <div><small>Scenarios: ';
                  for f in public/history/$d/report-summary-*.json; do b=$(basename "$f"); echo "<a href=\"history/$d/$b\">${b}</a> "; done
                  echo '</small></div>';
                fi;
              fi; 
              echo '</li>';
            done
            echo '</ul>'
            echo '</body></html>'
          } > ./public/index.html
      - name: Upload artifact (minimal)
        uses: actions/upload-pages-artifact@v3
        with:
          path: './public'
  deploy:
    if: ${{ vars.ENABLE_PAGES == '1' }}
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Check if GitHub Pages is enabled
        id: pages_check
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          status=$(curl -fsS -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${owner}/${repo}/pages" || true)
          if [ "$status" = "200" ]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
            {
              echo "### GitHub Pages is not enabled (status=$status)";
              echo "Enable Pages: Settings → Pages → Build and deployment → Source: GitHub Actions";
            } >> "$GITHUB_STEP_SUMMARY"
          fi
      - name: Deploy to GitHub Pages
        id: deployment
        if: steps.pages_check.outputs.enabled == 'true'
        uses: actions/deploy-pages@v4
