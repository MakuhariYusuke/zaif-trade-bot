name: Live ML Batch

on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 2 * * 1' # every Monday 11:00JST

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install deps
        run: npm ci
      - name: Live minimal once (cancel immediately)
        env:
          EXCHANGE: coincheck
          TRADE_FLOW: BUY_ONLY
          TEST_FLOW_QTY: '0.001'
          SAFETY_MODE: '1'
          FEATURES_SOURCE: live
        run: |
          KEY='${{ secrets.COINCHECK_KEY }}'
          SEC='${{ secrets.COINCHECK_SECRET }}'
          if [ -z "$KEY" ] || [ -z "$SEC" ]; then
            echo "No Coincheck secrets; fallback to DRY_RUN=1 with mock private API (using test:min-trade)"
            DRY_RUN=1 USE_PRIVATE_MOCK=1 npm run test:min-trade
          else
            COINCHECK_API_KEY="$KEY" COINCHECK_API_SECRET="$SEC" DRY_RUN=0 npm run test:min-live
          fi
      - name: Stats diff
        run: npx ts-node src/tools/stats/stats-today.ts --diff > stats-diff.json
      - name: ML export + search + timeline
        env:
          ML_MAX_WORKERS: '1'
          PAIRS: btc_jpy
        run: |
          npm run ml:export
          npm run ml:search
          npx ts-node src/tools/stats/stats-graph.ts --out stats.json --svg stats-timeline.svg
      - name: ML random search
        env:
          ML_MAX_WORKERS: '1'
          PAIRS: btc_jpy
          ML_SEARCH_MODE: random
          ML_RANDOM_STEPS: '120'
        run: npm run ml:search > ml-search-random.json
      - name: Build summary report (live)
        run: npm run report:summary -- --source live
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: live-ml-artifacts
          path: |
            logs/live/summary-*.json
            ml-dataset.csv
            ml-search-results.csv
            ml-search-top.json
            report-ml-random.json
            report-ml-random.csv
            stats-timeline.svg
            report-summary-live.json
      - name: Slack notify with summary
        if: always()
        run: |
          WEBHOOK='${{ secrets.SLACK_WEBHOOK_URL }}'
          if [ -z "$WEBHOOK" ]; then echo "No webhook; skipping"; exit 0; fi
          SUM=$(ls -1 logs/live/summary-*.json 2>/dev/null | tail -n1)
          DIFF=$(cat logs/live/stats-diff-live.json 2>/dev/null || echo '{}')
          RPT=$(cat report-summary-live.json 2>/dev/null || echo '{}')
          ML=$(cat report-ml-random.json 2>/dev/null || echo '{}')
          if [ -n "$SUM" ]; then S=$(cat "$SUM"); else S='{}'; fi
          ICON="✅"; STATUS="passed"
          if [ "${{ job.status }}" != "success" ]; then ICON="❌"; STATUS="failed"; fi
          WARN=""
          over=$(echo "$S" | jq -r '.warnings | any')
          inc=$(echo "$DIFF" | jq -r '((.diff.buyEntries // 0) + (.diff.sellEntries // 0))')
          if [ "$inc" = "0" ] || [ "$over" = "true" ]; then WARN="⚠"; fi
          PAIR=$(echo "$S" | jq -r '.latestFeature.pair // "-"')
          incBuy=$(echo "$DIFF" | jq -r '.diff.buyEntries // 0')
          incSell=$(echo "$DIFF" | jq -r '.diff.sellEntries // 0')
          pnl=$(echo "$DIFF" | jq -r '.diff.realizedPnl // 0')
          win=$(echo "$S" | jq -r '.stats.winRate // 0')
          maxdd=$(echo "$RPT" | jq -r '.totals.maxDrawdown // 0')
          t7=$(echo "$RPT" | jq -r '.totals.trend7dWinRate // 0')
          TOP=$(echo "$ML" | jq -r '.top[0] | select(.) | "Win%="+((.winRate//0)*100|tostring)+" PnL="+((.pnl//0)|tostring)+" params={S="+((.SMA_SHORT//0)|tostring)+",L="+((.SMA_LONG//0)|tostring)+",RSI="+((.SELL_RSI_OVERBOUGHT//0)|tostring)+","+((.BUY_RSI_OVERSOLD//0)|tostring)+"}"' || true)
          TEXT="$ICON$WARN Live Weekly ($PAIR) $STATUS\nDiff: buy+$incBuy / sell+$incSell / PnL+$pnl / Win%~$((win*100)) / MaxDD=$maxdd / Trend7dWin%=$((t7*100))\nML(random) Top: ${TOP:-N/A}\n<$SUM|summary>"
          curl -s -X POST -H 'Content-type: application/json' --data "{\"text\":\"$TEXT\"}" "$WEBHOOK" || true
