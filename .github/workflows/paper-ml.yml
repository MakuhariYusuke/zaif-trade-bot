name: Paper ML Nightly

on:
  schedule:
    - cron: '0 18 * * *'
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  nightly:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Install deps
        run: npm ci
      - name: Build
        run: npm run build
      - name: Run mock-scenario for pairs
        env:
          EXCHANGE: paper
          DRY_RUN: '1'
          PAIRS: eth_jpy,xrp_jpy
        run: npm run mock:scenario
      - name: Stats diff
        run: npx ts-node src/tools/stats/stats-today.ts --diff > stats-diff.json
      - name: Export ML dataset
        run: npm run ml:export
      - name: Grid search
        env:
          PAIRS: eth_jpy,xrp_jpy
          ML_MAX_WORKERS: '2'
        run: npm run ml:search > ml-search.json
      - name: Random search (artifact)
        env:
          PAIRS: eth_jpy,xrp_jpy
          ML_MAX_WORKERS: '1'
          ML_SEARCH_MODE: random
          ML_RANDOM_STEPS: '120'
        run: npm run ml:search > ml-search-random.json
      - name: Run stats graph timeline
        run: npx ts-node src/tools/stats/stats-graph.ts --out stats.json --svg stats-timeline.svg
      - name: Build summary report (paper)
        run: npm run report:summary -- --source paper
      - name: Top3 summary
        run: |
          cat ml-search-top.json | jq -r '.top[:3] | ("pair,RSI_OVER,RSI_UNDER,SMA_S,SMA_L,Win(%) ,PnL,Trades"), (.[] | [ .pair, .SELL_RSI_OVERBOUGHT, .BUY_RSI_OVERSOLD, .SMA_SHORT, .SMA_LONG, (.winRate*100|floor), .pnl, .trades ] | @csv )' > top3.csv
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: paper-ml
          path: |
            ml-dataset.csv
            ml-search-results.csv
            ml-search-top.json
            report-ml-random.json
            report-ml-random.csv
            top3.csv
            stats-timeline.svg
            stats-diff.json
            report-summary-paper.json
      - name: Archive summary bundle (tar.gz)
        if: always()
        run: |
          tar -czf paper-ml-bundle.tar.gz \
            ml-dataset.csv ml-search-results.csv ml-search-top.json top3.csv \
            report-ml-random.json report-ml-random.csv \
            stats-timeline.svg stats-diff.json report-summary-paper.json || true
      - name: Upload summary bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: paper-ml-bundle
          path: paper-ml-bundle.tar.gz
      - name: Slack notify with summary
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          WEBHOOK="$SLACK_WEBHOOK_URL"
          if [ -z "$WEBHOOK" ]; then echo "No webhook; skipping"; exit 0; fi
          DIFF=$(cat stats-diff.json 2>/dev/null || echo '{}')
          RPT=$(cat report-summary-paper.json 2>/dev/null || echo '{}')
          ML=$(cat report-ml-random.json 2>/dev/null || echo '{}')
          ICON="✅"; STATUS="passed"
          if [ "${{ job.status }}" != "success" ]; then ICON="❌"; STATUS="failed"; fi
          incBuy=$(echo "$DIFF" | jq -r '.diff.buyEntries // 0')
          incSell=$(echo "$DIFF" | jq -r '.diff.sellEntries // 0')
          pnl=$(echo "$DIFF" | jq -r '.diff.realizedPnl // 0')
          win=$(echo "$RPT" | jq -r '.totals.winRate // 0')
          maxdd=$(echo "$RPT" | jq -r '.totals.maxDrawdown // 0')
          t7=$(echo "$RPT" | jq -r '.totals.trend7dWinRate // 0')
          TOP=$(echo "$ML" | jq -r '.top[0] | select(.) | "Win%="+((.winRate//0)*100|tostring)+" PnL="+((.pnl//0)|tostring)+" params={S="+((.SMA_SHORT//0)|tostring)+",L="+((.SMA_LONG//0)|tostring)+",RSI="+((.SELL_RSI_OVERBOUGHT//0)|tostring)+","+((.BUY_RSI_OVERSOLD//0)|tostring)+"}"' || true)
          TOP3=$(cat ml-search-top.json 2>/dev/null | jq -r '.top[:3] | ( ["#","pair","Win%","PnL","MaxDD","Params"] | @tsv ), (.[] | [ (input_line_number-1|tostring), .pair, ((.winRate//0)*100|floor|tostring), ((.pnl//0)|tostring), ((.maxDrawdown//0)//0|tostring), ("S="+((.SMA_SHORT//0)|tostring)+",L="+((.SMA_LONG//0)|tostring)+",RSI="+((.SELL_RSI_OVERBOUGHT//0)|tostring)+","+((.BUY_RSI_OVERSOLD//0)|tostring)) ] | @tsv )' || true)
          TEXT="$ICON Paper ML $STATUS\nDiff: buy+$incBuy / sell+$incSell / PnL+$pnl\nTotals: PnL=$(echo $RPT | jq -r '.totals.PnL // 0') Win%=$((win*100)) MaxDD=$maxdd Trend7dWin%=$((t7*100))\nML(random) Top: ${TOP:-N/A}\nTop 3:\n$TOP3"
          curl -s -X POST -H 'Content-type: application/json' --data "{\"text\":\"$TEXT\"}" "$WEBHOOK" || true
      - name: GitHub comment with perPair
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            function mdTable(rows){
              if (!rows || !rows.length) return '';
              const header = ['pair','PnL','Win%','MaxDD','AvgHoldSec'];
              const body = rows.map(r=>`| ${r.pair} | ${r.PnL||0} | ${Math.round((r.winRate||0)*100)} | ${r.maxDrawdown||0} | ${r.avgHoldSec||0} |`).join('\n');
              return `| ${header.join(' | ')} |\n| --- | --- | --- | --- | --- |\n${body}`;
            }
            let rpt = {};
            try { rpt = JSON.parse(fs.readFileSync('report-summary-paper.json','utf8')); } catch {}
            const totals = rpt.totals || {};
            const perPair = rpt.perPair || [];
            let top3 = [];
            try { const t = JSON.parse(fs.readFileSync('ml-search-top.json','utf8')); top3 = (t.top||[]).slice(0,3); } catch {}
            function mdTop3(rows){
              if (!rows || !rows.length) return '';
              const header = ['#','pair','Win%','PnL','Params'];
              const body = rows.map((r,i)=>`| ${i+1} | ${r.pair} | ${Math.round((r.winRate||0)*100)} | ${r.pnl||0} | S=${r.SMA_SHORT},L=${r.SMA_LONG},RSI=${r.SELL_RSI_OVERBOUGHT},${r.BUY_RSI_OVERSOLD} |`).join('\n');
              return `| ${header.join(' | ')} |\n| --- | --- | --- | --- | --- |\n${body}`;
            }
            const body = `### Paper ML Summary\n\nTotals: PnL=${totals.PnL||0} Win%=${Math.round((totals.winRate||0)*100)} MaxDD=${totals.maxDrawdown||0} Trend7dWin%=${Math.round((totals.trend7dWinRate||0)*100)}\n\nTop 3 Results (random):\n\n${mdTop3(top3)}\n\n${mdTable(perPair)}`;
            async function safe(fn, args){ try { return await fn(args); } catch(e){ core.warning(`comment failed: ${e.message}`); } }
            if (context.payload.pull_request) {
              await safe(github.rest.issues.createComment, { issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body });
            } else if (context.eventName === 'push') {
              await safe(github.rest.repos.createCommitComment, { owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha, body });
            } else {
              core.info('No PR or push context; skip commenting.');
            }
