name: Paper Nightly
on:
  schedule:
    - cron: "0 15 * * *"   # JST 0:00
  workflow_dispatch: {}
permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  paper:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - run: npm ci && npm run build
      - name: Run paper analysis
        env:
          EXCHANGE: paper
          DRY_RUN: '1'
          PAIRS: btc_jpy,eth_jpy
          FEATURES_SOURCE: paper
          LONG_TESTS: '1'
        run: |
          npm run mock:scenario
          npx ts-node src/tools/stats/stats-today.ts --diff > stats-diff.json
          npm run ml:export
          npm run ml:search
          npx ts-node src/tools/stats/stats-graph.ts --out stats.json --svg stats-timeline.svg
          npm run trend:weekly
      - name: Trade plan (dry-run)
        env:
          DRY_RUN: '1'
        run: |
          npm run -s trade:live:dry > trade-plan.json
      - name: Build summary report (paper)
        run: npm run report:summary -- --source paper
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nightly-results
          path: |
            ml-dataset.csv
            ml-search-results.csv
            ml-search-top.json
            stats-timeline.svg
            stats-diff.json
            report-summary-paper.json
            trade-plan.json
            logs/features/**
      - name: Publish reports into repo (branch)
        if: always()
        run: |
          set -e
          DAY=$(date -u +%Y-%m-%d)
          DIR="reports/day-$DAY"
          mkdir -p "$DIR"
          # write index.md
          {
            echo "# Reports $DAY";
            echo "\n## Artifacts";
            for f in stats-timeline.svg stats-diff.json report-summary-paper.json ml-search-top.json; do
              [ -f "$f" ] && echo "- [$f](./$f)";
            done;
            if [ -f trade-plan.json ]; then echo "- [trade-plan.json](./trade-plan.json)"; fi
            if [ -f reports/latest/trend-weekly.json ]; then echo "- [trend-weekly.json](../latest/trend-weekly.json)"; fi
          } > "$DIR/index.md"
          # copy files
          for f in stats-timeline.svg stats-diff.json report-summary-paper.json ml-search-top.json trade-plan.json; do
            [ -f "$f" ] && cp -f "$f" "$DIR/" || true;
          done
          # copy trend for the day
          [ -f "reports/day-$DAY/trend-7d.json" ] || true
          # prune older than 14 days
          ls -1 reports 2>/dev/null | grep '^day-' | sort | head -n -14 | while read d; do rm -rf "reports/$d" || true; done
          git config user.name "github-actions"; git config user.email "github-actions@github.com"
          git add reports || true
          git commit -m "chore(reports): add $DAY" || true
          git push || true
      - name: Slack notify (nightly)
        if: always()
        env:
          JOB_STATUS: ${{ job.status }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          WEBHOOK="$SLACK_WEBHOOK_URL"
          if [ -z "$WEBHOOK" ]; then echo "No webhook; skipping"; exit 0; fi
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          DIFF_JSON=$(cat stats-diff.json 2>/dev/null || echo '{}')
          RPT=$(cat report-summary-paper.json 2>/dev/null || echo '{}')
          TREND=$(cat reports/latest/trend-weekly.json 2>/dev/null || echo '{}')
          TPLAN=$(cat trade-plan.json 2>/dev/null || echo '{}')
          TSTATE=$(cat trade-state.json 2>/dev/null || echo '{}')
          ZERO=$(echo "$DIFF_JSON" | jq '.diff | to_entries | map(.value) | all(.==0)')
          ICON="✅"; STATUS="passed"
          if [ "$JOB_STATUS" != "success" ]; then ICON="❌"; STATUS="failed"; fi
          if [ "$ZERO" = "true" ] && [ "$JOB_STATUS" = "success" ]; then ICON="⚠"; STATUS="warn (no diffs)"; fi
          BUY=$(echo "$DIFF_JSON" | jq -r '.diff.buyEntries // 0')
          SELL=$(echo "$DIFF_JSON" | jq -r '.diff.sellEntries // 0')
          RSI=$(echo "$DIFF_JSON" | jq -r '.diff.rsiExits // 0')
          TRLEX=$(echo "$DIFF_JSON" | jq -r '.diff.trailExitTotal // 0')
          TSTOP=$(echo "$DIFF_JSON" | jq -r '.diff.trailStops // 0')
          PNL=$(echo "$DIFF_JSON" | jq -r '.diff.realizedPnl // 0')
          WIN=$(jq -r '.values | if (.trades//0)>0 then ((.wins//0)/(.trades//1)*100) else 0 end' stats-diff.json 2>/dev/null || echo 0)
          # Totals from report-summary (more robust across data sources)
          TP=$(echo "$RPT" | jq -r '.totals.PnL // 0')
          TW=$(echo "$RPT" | jq -r '.totals.winRate // 0')
          TM=$(echo "$RPT" | jq -r '.totals.maxDrawdown // 0')
          TWK_PNL=$(echo "$TREND" | jq -r '.totals.PnL // 0')
          TWK_WIN=$(echo "$TREND" | jq -r '.totals.winRate // 0')
          # Trade plan & phase
          PLAN_ORD=$(echo "$TPLAN" | jq -r '.plannedOrders // 0')
          PLAN_PHASE=$(echo "$TPLAN" | jq -r '.phase // 0')
          PHASE_NOW=$(echo "$TSTATE" | jq -r '.phase // 0')
          SUCC_TOT=$(echo "$TSTATE" | jq -r '.totalSuccess // 0')
          # Per-pair summary (from stats.json if present)
          PAIRS_SUMMARY=""
          if [ -f stats.json ]; then
            PAIRS_SUMMARY=$(jq -r '.pairs[] | "• \(.pair): PnL=\(.realizedPnl) Win=\(((.winRate)*100|floor))% StreakW=\(.streakWin // 0) StreakL=\(.streakLoss // 0)"' stats.json | sed ':a;N;$!ba;s/\n/\\n/g')
          fi
          RLNK="reports/day-$(date -u +%Y-%m-%d)/index.md"
          TEXT="$ICON Paper Nightly $STATUS\nTradePlan: phase=${PLAN_PHASE} planned=${PLAN_ORD} (now phase=${PHASE_NOW}, totalSuccess=${SUCC_TOT})\nDiff: buy+$BUY / sell+$SELL / rsi+$RSI / trailExit+$TRLEX / trailStops+$TSTOP / PnL+$PNL / Win%~${WIN}%\nTotals: PnL=$TP Win%=$((TW*100)) MaxDD=$TM\nTrend7d: PnL=$TWK_PNL Win%=$((TWK_WIN*100))\nAdded report: $RLNK\n$PAIRS_SUMMARY\n<$RUN_URL|Open Run / Artifacts>"
          curl -s -X POST -H 'Content-type: application/json' --data "{\"text\":\"$TEXT\"}" "$WEBHOOK" || true
      - name: Comment results on PR/Commit (nightly)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let stats = {}, diff = {};
            let rpt = {};
            let tplan = {};
            let tstate = {};
            try { stats = JSON.parse(fs.readFileSync('stats.json','utf8')); } catch {}
            try { diff = JSON.parse(fs.readFileSync('stats-diff.json','utf8')); } catch {}
            try { rpt = JSON.parse(fs.readFileSync('report-summary-paper.json','utf8')); } catch {}
            try { tplan = JSON.parse(fs.readFileSync('trade-plan.json','utf8')); } catch {}
            try { tstate = JSON.parse(fs.readFileSync('trade-state.json','utf8')); } catch {}
            const pairs = stats.pairs || [];
            const pairsDiff = (diff.pairsDiff || []).reduce((m, d)=>{ m[d.pair]=d.diff; return m; }, {});
            const vals = diff.values || {};
            const d = diff.diff || {};
            const winPct = vals.trades ? Math.round((vals.wins||0)/(vals.trades||1)*100) : 0;
            const totals = rpt.totals || {};
            let trend = {};
            try { trend = JSON.parse(fs.readFileSync('reports/latest/trend-weekly.json','utf8')); } catch {}
            const day = new Date().toISOString().slice(0,10);
            let body = `## Paper Nightly (report: reports/day-${day}/index.md)\n\n`;
            if (tplan && (tplan.phase!=null || tplan.plannedOrders!=null)) {
              const nowPhase = (tstate && typeof tstate.phase==='number') ? tstate.phase : '-';
              const totalSuccess = (tstate && typeof tstate.totalSuccess==='number') ? tstate.totalSuccess : 0;
              body += `TradePlan: phase=${tplan.phase||'-'} planned=${tplan.plannedOrders||0} (now phase=${nowPhase}, totalSuccess=${totalSuccess})\n`;
            }
            body += `Diff: buy +${d.buyEntries||0}, sell +${d.sellEntries||0}, rsi +${d.rsiExits||0}, trailExit +${d.trailExitTotal||0}, trailStops +${d.trailStops||0}, PnL +${(d.realizedPnl||0)}\n`;
            body += `Win% (agg): ${winPct}%\n`;
            if (totals && (totals.PnL!=null || totals.winRate!=null || totals.maxDrawdown!=null)) {
              body += `Totals: PnL=${totals.PnL||0} Win%=${Math.round((totals.winRate||0)*100)} MaxDD=${totals.maxDrawdown||0}\n\n`;
            } else {
              body += `\n`;
            }
            const tTot = (trend && trend.totals) || {};
            if (tTot && (tTot.PnL!=null || tTot.winRate!=null)) {
              body += `Trend7d: PnL=${tTot.PnL||0} Win%=${Math.round(((tTot.winRate||0))*100)}\n\n`;
            }
            if (pairs.length) {
              body += `| Pair | PnL | Win% | StreakW | StreakL |\n|---|---:|---:|---:|---:|\n`;
              for (const p of pairs){
                const w = Math.round((p.winRate||0)*100);
                body += `| ${p.pair} | ${p.realizedPnl?.toFixed(2)||0} | ${w}% | ${p.streakWin||0} | ${p.streakLoss||0} |\n`;
              }
            }
            body += `\n[Open Run / Artifacts](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
            async function safeCall(fn, args){ try { return await fn(args); } catch (e){ core.warning(`Comment failed: ${e.message}`); }}
            if (context.payload.pull_request) {
              await safeCall(github.rest.issues.createComment, { owner: context.repo.owner, repo: context.repo.repo, issue_number: context.issue.number, body });
            } else if (context.eventName === 'push') {
              await safeCall(github.rest.repos.createCommitComment, { owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha, body });
            } else {
              core.info('No PR or push context; skip commenting.');
            }
