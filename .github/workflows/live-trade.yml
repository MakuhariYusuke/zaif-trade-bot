name: Live Minimal Trade

on:
  workflow_dispatch:
    inputs:
      pair:
        description: "Trading pair"
        default: "xrp_jpy"
        required: true
        type: choice
        options: [xrp_jpy, eth_jpy]
      trade_flow:
        description: "Trade flow"
        type: choice
        options: [BUY_ONLY, SELL_ONLY]
        default: BUY_ONLY
      orderType:
        description: "Order type"
        type: choice
        options: [market, limit]
        default: market
      qty:
        description: "Quantity (integer, min 500 for XRP)"
        default: "500"
        required: true
      rate:
        description: "Limit rate (used only when orderType=limit)"
        default: "490"

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  live-trade:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - run: npm ci && npm run build
      - name: Validate inputs
        run: |
          if [ "${{ github.event.inputs.qty }}" -lt 500 ]; then
            echo "Error: qty must be >= 500";
            exit 1;
          fi
      - name: Run Live Minimal Trade
        env:
          EXCHANGE: coincheck
          TRADE_FLOW: ${{ github.event.inputs.trade_flow }}
          PAIR: ${{ github.event.inputs.pair }}
          ORDER_TYPE: ${{ github.event.inputs.orderType }}
          TEST_FLOW_QTY: ${{ github.event.inputs.qty }}
          TEST_FLOW_RATE: ${{ github.event.inputs.orderType == 'market' && '' || github.event.inputs.rate }}
          DRY_RUN: '0'
          FEATURES_SOURCE: live
          COINCHECK_API_KEY: ${{ secrets.COINCHECK_KEY }}
          COINCHECK_API_SECRET: ${{ secrets.COINCHECK_SECRET }}
        run: "npm run live:minimal"
      - name: Build summary report (live)
        if: always()
        run: npm run report:summary -- --source live
      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: live-trade-results
          path: |
            logs/live/summary-*.json
            logs/features/live/**
            report-summary-live.json
      - name: Summarize Results
        id: summarize
        run: |
          FILE=$(ls -1 logs/live/summary-*.json 2>/dev/null | tail -n1)
          if [ -z "$FILE" ]; then echo "summary=No summary file" >> $GITHUB_OUTPUT; exit 0; fi
          SUMMARY=$(jq -r '
            . as $s | [
              "Pair: \($s.latestFeature.pair // "-")",
              "BuyEntries: \($s.stats.incBuy // 0)",
              "SellEntries: \($s.stats.incSell // 0)",
              "PnL: \($s.stats.incPnl // 0)",
              "WinRate: \(((($s.stats.winRate // 0)*100)|floor))%",
              "Warnings: \(($s.warnings // [])|tostring)"
            ] | join("\n")
          ' "$FILE")
          echo "$SUMMARY"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Slack Notify
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -z "$SLACK_WEBHOOK_URL" ]; then echo "No Slack webhook; skipping"; exit 0; fi
          STATUS="✅ Live Trade Success"; [ "${{ job.status }}" = "success" ] || STATUS="❌ Live Trade Failed"
          RPT=$(cat report-summary-live.json 2>/dev/null || echo '{}')
          PNL=$(echo "$RPT" | jq -r '.totals.PnL // 0')
          WIN=$(echo "$RPT" | jq -r '.totals.winRate // 0')
          MAXDD=$(echo "$RPT" | jq -r '.totals.maxDrawdown // 0')
          T7=$(echo "$RPT" | jq -r '.totals.trend7dWinRate // 0')
          EXTRA="PnL=$PNL Win%=$((WIN*100)) MaxDD=$MAXDD Trend7dWin%=$((T7*100))"
          TOP3=$(cat ml-search-top.json 2>/dev/null | jq -r '.top[:3] | ( ["#","pair","Win%","PnL","Params"] | @tsv ), (.[] | [ (input_line_number-1|tostring), .pair, ((.winRate//0)*100|floor|tostring), ((.pnl//0)|tostring), ("S="+((.SMA_SHORT//0)|tostring)+",L="+((.SMA_LONG//0)|tostring)+",RSI="+((.SELL_RSI_OVERBOUGHT//0)|tostring)+","+((.BUY_RSI_OVERSOLD//0)|tostring)) ] | @tsv )' || true)
          TEXT="${STATUS}\n${EXTRA}\n\n${{ steps.summarize.outputs.summary }}\n\nTop 3 Results (random):\n$TOP3\n\n(Artifacts available in GitHub)"
          curl -s -X POST -H 'Content-type: application/json' --data "{\"text\": \"$TEXT\"}" "$SLACK_WEBHOOK_URL" || true
      - name: GitHub Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = process.env.SUMMARY || `No summary`;
            // include PnL/Win%/MaxDD from report-summary if present
            const fs = require('fs');
            let rpt = {};
            try { rpt = JSON.parse(fs.readFileSync('report-summary-live.json','utf8')); } catch {}
            const totals = rpt.totals || {};
            const extra = (totals && (totals.PnL!=null || totals.winRate!=null || totals.maxDrawdown!=null))
              ? `\n\nTotals: PnL=${totals.PnL||0} Win%=${Math.round((totals.winRate||0)*100)} MaxDD=${totals.maxDrawdown||0} Trend7dWin%=${Math.round((totals.trend7dWinRate||0)*100)}`
              : '';
            let top3 = [];
            try { const t = JSON.parse(fs.readFileSync('ml-search-top.json','utf8')); top3 = (t.top||[]).slice(0,3); } catch {}
            function mdTop3(rows){
              if (!rows || !rows.length) return '';
              const header = ['#','pair','Win%','PnL','Params'];
              const body = rows.map((r,i)=>`| ${i+1} | ${r.pair} | ${Math.round((r.winRate||0)*100)} | ${r.pnl||0} | S=${r.SMA_SHORT},L=${r.SMA_LONG},RSI=${r.SELL_RSI_OVERBOUGHT},${r.BUY_RSI_OVERSOLD} |`).join('\n');
              return `| ${header.join(' | ')} |\n| --- | --- | --- | --- | --- |\n${body}`;
            }
            const body = `### Live Minimal Trade Result\n\n\n\`\`\`\n${summary}\n\`\`\`${extra}\n\nTop 3 Results (random):\n\n${mdTop3(top3)}`;
            async function safeCall(fn, args){ try { return await fn(args); } catch (e){ core.warning(`Comment failed: ${e.message}`); } }
            if (context.payload.pull_request) {
              await safeCall(github.rest.issues.createComment, { issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body });
            } else if (context.eventName === 'push') {
              await safeCall(github.rest.repos.createCommitComment, { owner: context.repo.owner, repo: context.repo.repo, commit_sha: context.sha, body });
            } else {
              core.info('No PR or push context; skip commenting.');
            }
        env:
          SUMMARY: ${{ steps.summarize.outputs.summary }}
